using UnityEngine;
using System.Collections.Generic;
using System;

public enum NotificationType
{
    MedicalRelated,   // red
    GovernmentAction,
    FinanceRelated,     // orange
    CommentRelated      // blue
}

public class NotificationManager : MonoBehaviour
{
    public GameObject notificationPrefab;
    public Transform notificationParent;
    // public float displayTime = 3f;
    public int maxMessages = 5;
    private Dictionary<string, float> recentNotifications = new Dictionary<string, float>();
    private float duplicateCooldown = 10f; // ÂÜ∑Âç¥Êó∂Èó¥ 10 Áßí


    private Queue<GameObject> activeMessages = new Queue<GameObject>();

    public void ShowNotification(string notificationTitle, string notificationDetail, NotificationType type, float delay = 0f)
    {
        CleanupOldNotifications(); // Âä†Ëøô‰∏ÄË°åÂñµÔºÅ
        string key = notificationTitle;

        if (recentNotifications.TryGetValue(key, out float lastTime))
        {
            if (Time.time - lastTime < duplicateCooldown)
            {
                Debug.Log($"[NotificationManager] Skipped duplicate notification: {key}");
                return; // ÂÜ∑Âç¥‰∏≠Ôºå‰∏çÊòæÁ§∫
            }
        }

        recentNotifications[key] = Time.time;
        StartCoroutine(DelayedShow(notificationTitle, notificationDetail, type, delay));
    }

    private IEnumerator<WaitForSeconds> DelayedShow(string title, string detail, NotificationType type, float delay)
    {
        yield return new WaitForSeconds(delay);

        GameObject newNotification = Instantiate(notificationPrefab, notificationParent);
        Color bgColor = GetColorByNotificationType(type);

        var item = newNotification.GetComponent<NotificationItem>();

        // üß† ËÆ°ÁÆóÂä®ÊÄÅÊòæÁ§∫Êó∂Èó¥ÔºàÂü∫Á°Ä3Áßí + ÊØè10Â≠óÂä†0.5ÁßíÔºåÊúÄÂ§ö10ÁßíÔºâ
        // üß† ËÆ°ÁÆóÂä®ÊÄÅÊòæÁ§∫Êó∂Èó¥ÔºàÂü∫Á°Ä5Áßí + ÊØè10Â≠óÂä†0.5ÁßíÔºåÊúÄÂ§ö20ÁßíÔºâ
        // üß† ËÆ°ÁÆóÂä®ÊÄÅÊòæÁ§∫Êó∂Èó¥ÔºàÂü∫Á°Ä5Áßí + ÊØè10Â≠óÂä†0.5ÁßíÔºåÊúÄÂ§ö20ÁßíÔºâ
        int totalLength = (title?.Length ?? 0) + (detail?.Length ?? 0);
        float extraTime = Mathf.Min(20f, 5f + (totalLength / 10f) * 0.5f);



        item.Initialize(title, detail, extraTime, bgColor);

        activeMessages.Enqueue(newNotification);

        if (activeMessages.Count > maxMessages)
        {
            GameObject oldNotification = activeMessages.Dequeue();
            Destroy(oldNotification);
        }
    }


    public Color GetColorByNotificationType(NotificationType type)
    {
        switch (type)
        {
            case NotificationType.MedicalRelated:
                return new Color(1f, 0f, 0f, 0.3f); // Á∫¢Ëâ≤ÂçäÈÄèÊòé
            case NotificationType.FinanceRelated:
                return new Color(1f, 0.5f, 0f, 0.3f); // Ê©ôËâ≤ÂçäÈÄèÊòé
            case NotificationType.CommentRelated:
                return new Color(0f, 0.5f, 1f, 0.3f); // ËìùËâ≤ÂçäÈÄèÊòé
            case NotificationType.GovernmentAction:
                return new Color(0.59f, 0.29f, 0.0f, 0.3f); // Ê£ïË§êËâ≤
            default:
                return new Color(1f, 1f, 1f, 0.3f); // ÈªòËÆ§ÁôΩ
        }
    }
    
    private void CleanupOldNotifications()
    {
        float currentTime = Time.time;
        List<string> keysToRemove = new List<string>();

        foreach (var pair in recentNotifications)
        {
            if (currentTime - pair.Value >= duplicateCooldown)
            {
                keysToRemove.Add(pair.Key);
            }
        }

        foreach (var key in keysToRemove)
        {
            recentNotifications.Remove(key);
        }
    }

    //È¶ñ‰æãÊ≠ª‰∫°ÁóÖ‰æã‰ø°ÊÅØ

    public void SendFirstDeadCaseNotification(Sims targetsim){
        NotificationType type = NotificationType.MedicalRelated;
        string title = "Frist Death Case";
        string content = $"{targetsim.simsName}, a citizen who lived in {targetsim.home.placeDiary}, passed away due to a recent infectious disease. This caused some panic. Maybe the government should do something";
        // Debug.Log($"[NotificationTest] Showing: [{type}] {title} - {content}");
        ShowNotification(title, content, type, 1f);
    }

    // ÂåªÈô¢Êª°ËΩΩÊ∂àÊÅØ

    private static List<string> hospitalFullStatements = new List<string>(){
        "Some citizens wish to go to the hospital, but there are no available beds in any hospitals.",
        "Hospitals are overloaded and unable to accommodate new patients",
        "Because the hospital was full, a sick citizen had to stay at home"
    }; 
    public void SendHospitalFullNotification(){
        NotificationType type = NotificationType.MedicalRelated;
        string title = "Hospital Capacity Insufficient";
        string content = RandomManager.Choice(hospitalFullStatements);
        // Debug.Log($"[NotificationTest] Showing: [{type}] {title} - {content}");
        ShowNotification(title, content, type, 1f);
    }

    // ÂíåÈöîÁ¶ªÊúâÂÖ≥ÁöÑ‰∏úË•ø
    public void SendPartialLockdownNotification(Place targetPlace){
        NotificationType type = NotificationType.GovernmentAction;
        string title = "Partial Lockdown Started";
        string content =  $"{targetPlace.placeName} have been put into lockdown, and these citizens are unable to go to work, perhaps to reduce the spread of the plague? But who knows";
        // Debug.Log($"[NotificationTest] Showing: [{type}] {title} - {content}");
        ShowNotification(title, content, type, 1f);
    }

    public void SendCancelPartialLockdownNotification(Place targetPlace){
        NotificationType type = NotificationType.GovernmentAction;
        string title = "Partial Canceled";
        string content = $"{targetPlace.placeName} has ended the lockdown of infectious diseases, people can go out for fun, or work again";
        // Debug.Log($"[NotificationTest] Showing: [{type}] {title} - {content}");
        ShowNotification(title, content, type, 1f);
    }

    private static List<string> globalLockdownStatements = new List<string>(){
        "Some neighborhoods have been put into lockdown, and these citizens are unable to go to work, perhaps to reduce the spread of the plague? But who knows",
    }; 
    public void SendGlobalLockdownNotification(){
        NotificationType type = NotificationType.GovernmentAction;
        string title = "Government Action";
        string content = RandomManager.Choice(globalLockdownStatements);
        // Debug.Log($"[NotificationTest] Showing: [{type}] {title} - {content}");
        ShowNotification(title, content, type, 1f);
    }

    // Âø´Êç∑ÊµãËØïÊñπÊ≥ï
    public void NotificationTest()
    {
        List<NotificationType> types = new List<NotificationType>
        {
            NotificationType.CommentRelated,
            NotificationType.FinanceRelated,
            NotificationType.MedicalRelated
        };

        List<string> titles = new List<string>
        {
            "Citizen Alert",
            // "Economic Update",
            // "New Message",
            // "Breaking News",
            // "Health Advisory"
        };

        List<string> contents = new List<string>
        {
            "A new outbreak has been detected in the downtown area.",
            // "Your tax income has increased by 12% this month.",
            // "Someone left a comment on your city policies.",
            // "Authorities have issued a new infection control guideline.",
            // "Investment in public transport is paying off!"
        };

        NotificationType type = RandomManager.Choice(types);
        string title = RandomManager.Choice(titles);
        string content = RandomManager.Choice(contents);

        Debug.Log($"[NotificationTest] Showing: [{type}] {title} - {content}");

        ShowNotification(title, content, type, 1f);
    }
}
